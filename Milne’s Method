
function []=MilnesMethod(x0,y0,xn,h,f)
x=x0:h:xn;
n=length(x)-1;
y = zeros(1,n+1);
y(1)=y0;
for i=1:3
K1=f(x(i),y(i));
K2=f(x(i)+h/2,y(i)+h*K1/2);
K3=f(x(i)+h/2,y(i)+h*K2/2);
K4=f(x(i)+h,y(i)+h*K3);
y(i+1)=y(i)+(h/6)*(K1+2*K2+2*K3+K4);
end
for i=4:n     
y(i+1)=y(i-3)+(4*h/3)*(2*f(x(i),y(i))- f(x(i-1),y(i-1))+2*f(x(i-2),y(i-2))); 
%predictor formula
y(i+1)=y(i-1)+(h/3)*(f(x(i+1),y(i+1))+4*f(x(i),y(i))+f(x(i-1),y(i-1))); 
% Corrector formula
end
fprintf('Approximate solution at x=%f is y=%f \n',xn,y(end))
plot(x,y,'*')
hold on
u=dsolve('Dy=y-x^2+1','y(0)=.5','x');
u=eval(u);
fprintf('The solution obtained using dsolve at x=%f is u=%f \n',xn,u(end))
plot(x,u,'r')
end

>> x0=0;y0=0.5;xn=1;h=0.25;
>> f=@(x,y) y-x^2+1;
>> MilnesMethod(x0,y0,xn,h,f)
